import numpy as np
import scipy.sparse as spsp


# noinspection DuplicatedCode
def d2_2d_variable_4(m, b, ops_1d):
    """
    Returns 4th order accurate 2D operators for a square m*m-grid with wave speeds b.
    The operators are HH, D2 in x- and y-directions, and two tuples with e and d-operators
    for W, E, S, N.

    @return: HH, (D2x, D2y), (eW, eE, eS, eN), (d1_W, d1_E, d1_S, d1_N)
    @param b: (m*m, 1) matrix containing wave speeds in column-first order
    @param m: number of grid points per direction
    @param h: distance between points
    @param ops_1d: 1D operators from D2_Variable_4
    """
    H, HI, D1, D2_fun, e_l, e_r, d1_l, d1_r = ops_1d
    N = m*m

    ind = np.reshape(np.arange(N), (m, m))

    # D2y is just diag(D2(b(x,:))) which is very easy to build.
    # D2x is much more annoying to build, but using that a column
    # first matrix can be arranged to a row first matrix using a
    # perfect shuffle matrix such that B kron A = S (A kron B) S^T
    # This makes life very easy for us :)
    I_N = spsp.eye(N, format='lil')
    S = spsp.vstack([I_N[i::m, :] for i in range(m)]).tocsr()
    D2x = S @ spsp.block_diag([D2_fun(b[ind[:, i]]) for i in range(m)]).tocsr() @ S.T
    D2y = spsp.block_diag([D2_fun(b[ind[i, :]]) for i in range(m)]).tocsr()

    Im = spsp.eye(m)
    HH = spsp.kron(H, H, 'dia')
    HHI = spsp.kron(HI, HI, 'dia')
    eW = spsp.kron(Im, e_l, 'csr')
    eE = spsp.kron(Im, e_r, 'csr')
    eS = spsp.kron(e_l, Im, 'csr')
    eN = spsp.kron(e_r, Im, 'csr')
    d1_W = spsp.kron(Im, d1_l, 'csr')
    d1_E = spsp.kron(Im, d1_r, 'csr')
    d1_S = spsp.kron(d1_l, Im, 'csr')
    d1_N = spsp.kron(d1_r, Im, 'csr')

    return HH, HHI, (D2x, D2y), (eW, eE, eS, eN), (d1_W, d1_E, d1_S, d1_N)


# noinspection DuplicatedCode
def D2_Variable_4(m, h):
    """Returns fourth order accurate H, HI, D1, D2_fun, e_l, e_r, d1_l, d1_r in sparse format"""

    e_l = spsp.coo_array(([1], ([0], [0])), shape=(m, 1)).tocsr()
    e_r = spsp.coo_array(([1], ([m - 1], [0])), shape=(m, 1)).tocsr()

    H_diag = np.ones(m)
    H_diag[:4] = [17 / 48, 59 / 48, 43 / 48, 49 / 48]
    H_diag[-4:] = [49 / 48, 43 / 48, 59 / 48, 17 / 48]
    H_diag = H_diag * h
    H = spsp.diags(H_diag)
    HI = spsp.diags(1 / H_diag)

    Q = spsp.diags([-1 / 12, 8 / 12, -8 / 12, 1 / 12], [2, 1, -1, -2], (m, m)).tolil()
    Q_U = np.array([[0, 59 / 96, -1 / 12, -1 / 32], [-59 / 96, 0, 59 / 96, 0],
                    [1 / 12, -59 / 96, 0, 59 / 96], [1 / 32, 0, -59 / 96, 0]])
    Q[0:4, 0:4] = Q_U
    Q[-4:, -4:] = np.flipud(np.fliplr(-Q_U))
    Q = Q.tocsr()

    D1 = HI @ (Q - 1 / 2 * (e_l @ e_l.transpose()) + 1 / 2 * (e_r @ e_r.transpose()))

    d_stenc = np.array([-11 / 6, 3, -3 / 2, 1 / 3]) / h

    d1_l = spsp.lil_array((m, 1))
    d1_l[0:4] = d_stenc
    d1_l = d1_l.tocsr()

    d1_r = spsp.lil_array((m, 1))
    d1_r[-4:] = np.flip(-d_stenc)
    d1_r = d1_r.tocsr()

    def D2_fun(c):
        """
        Given a vector with wave speeds c of length m, returns an m*m matrix
        approximating the second derivative on m

        @param c: an array of length m
        @rtype: scipy.sparse.csr_matrix
        @return: a sparse csr m*m matrix approximating the second derivative
        """
        M = spsp.lil_matrix((m, m))

        for i in range(3, m - 3):
            M[i, i - 2:i + 3] = np.array([-c[i - 1] / 6 + c[i - 2] / 8 + c[i] / 8,
                                          -c[i - 2] / 6 - c[i + 1] / 6 - c[i - 1] / 2 - c[i] / 2,
                                          c[i - 2] / 24 + 5 / 6 * c[i - 1] + 5 / 6 * c[i + 1] + c[
                                              i + 2] / 24 + 3 / 4 * c[i],
                                          -c[i - 1] / 6 - c[i + 2] / 6 - c[i] / 2 - c[i + 1] / 2,
                                          -c[i + 1] / 6 + c[i] / 8 + c[i + 2] / 8])

        M[:6, :6] = np.array([
            [12 / 17 * c[0] + 59 / 192 * c[1] + 27010400129 / 345067064608 * c[
                2] + 69462376031 / 2070402387648 * c[3],
             -59 / 68 * c[0] - 6025413881 / 21126554976 * c[2] - 537416663 / 7042184992 * c[3],
             2 / 17 * c[0] - 59 / 192 * c[1] + 213318005 / 16049630912 * c[
                 3] + 2083938599 / 8024815456 * c[2],
             3 / 68 * c[0] - 1244724001 / 21126554976 * c[2] + 752806667 / 21126554976 * c[3],
             49579087 / 10149031312 * c[2] - 49579087 / 10149031312 * c[3],
             -c[3] / 784 + c[2] / 784]
            , [
                -59 / 68 * c[0] - 6025413881 / 21126554976 * c[2] - 537416663 / 7042184992 * c[
                    3],
                3481 / 3264 * c[0] + 9258282831623875 / 7669235228057664 * c[
                    2] + 236024329996203 / 1278205871342944 * c[3],
                -59 / 408 * c[0] - 29294615794607 / 29725717938208 * c[
                    2] - 2944673881023 / 29725717938208 * c[3],
                -59 / 1088 * c[0] + 260297319232891 / 2556411742685888 * c[
                    2] - 60834186813841 / 1278205871342944 * c[3],
                -1328188692663 / 37594290333616 * c[2] + 1328188692663 / 37594290333616 * c[3],
                -8673 / 2904112 * c[2] + 8673 / 2904112 * c[3]]
            , [
                2 / 17 * c[0] - 59 / 192 * c[1] + 213318005 / 16049630912 * c[
                    3] + 2083938599 / 8024815456 * c[2],
                -59 / 408 * c[0] - 29294615794607 / 29725717938208 * c[
                    2] - 2944673881023 / 29725717938208 * c[3],
                c[0] / 51 + 59 / 192 * c[1] + 13777050223300597 / 26218083221499456 * c[
                    3] + 564461 / 13384296 * c[4] + 378288882302546512209 / 270764341349677687456 * c[2],
                c[0] / 136 - 125059 / 743572 * c[4] - 4836340090442187227 / 5525802884687299744 * c[
                    2] - 17220493277981 / 89177153814624 * c[3],
                -10532412077335 / 42840005263888 * c[3] + 1613976761032884305 / 7963657098519931984 * c[
                    2] + 564461 / 4461432 * c[4],
                -960119 / 1280713392 * c[3] - 3391 / 6692148 * c[
                    4] + 33235054191 / 26452850508784 * c[2]]
            , [
                3 / 68 * c[0] - 1244724001 / 21126554976 * c[2] + 752806667 / 21126554976 * c[3],
                -59 / 1088 * c[0] + 260297319232891 / 2556411742685888 * c[
                    2] - 60834186813841 / 1278205871342944 * c[3],
                c[0] / 136 - 125059 / 743572 * c[4] - 4836340090442187227 / 5525802884687299744 * c[
                    2] - 17220493277981 / 89177153814624 * c[3],
                3 / 1088 * c[0] + 507284006600757858213 / 475219048083107777984 * c[
                    2] + 1869103 / 2230716 * c[4] + c[5] / 24 + 1950062198436997 / 3834617614028832 *
                c[3],
                -4959271814984644613 / 20965546238960637264 * c[2] - c[
                    5] / 6 - 15998714909649 / 37594290333616 * c[3] - 375177 / 743572 * c[4],
                -368395 / 2230716 * c[4] + 752806667 / 539854092016 * c[2] + 1063649 / 8712336 * c[
                    3] + c[5] / 8]
            , [
                49579087 / 10149031312 * c[2] - 49579087 / 10149031312 * c[3],
                -1328188692663 / 37594290333616 * c[2] + 1328188692663 / 37594290333616 * c[3],
                -10532412077335 / 42840005263888 * c[3] + 1613976761032884305 / 7963657098519931984 * c[
                    2] + 564461 / 4461432 * c[4],
                -4959271814984644613 / 20965546238960637264 * c[2] - c[
                    5] / 6 - 15998714909649 / 37594290333616 * c[3] - 375177 / 743572 * c[4],
                8386761355510099813 / 128413970713633903242 * c[
                    2] + 2224717261773437 / 2763180339520776 * c[3] + 5 / 6 * c[5] + c[
                    6] / 24 + 280535 / 371786 * c[4],
                -35039615 / 213452232 * c[3] - c[6] / 6 - 13091810925 / 13226425254392 * c[
                    2] - 1118749 / 2230716 * c[4] - c[5] / 2]
            , [
                -c[3] / 784 + c[2] / 784,
                -8673 / 2904112 * c[2] + 8673 / 2904112 * c[3],
                -960119 / 1280713392 * c[3] - 3391 / 6692148 * c[
                    4] + 33235054191 / 26452850508784 * c[2],
                -368395 / 2230716 * c[4] + 752806667 / 539854092016 * c[2] + 1063649 / 8712336 * c[
                    3] + c[5] / 8,
                -35039615 / 213452232 * c[3] - c[6] / 6 - 13091810925 / 13226425254392 * c[
                    2] - 1118749 / 2230716 * c[4] - c[5] / 2,
                3290636 / 80044587 * c[3] + 5580181 / 6692148 * c[4] + 5 / 6 * c[6] + c[
                    7] / 24 + 660204843 / 13226425254392 * c[2] + 3 / 4 * c[5]]])

        M[m - 6:, m - 6:] = np.array([
            [c[m - 8] / 24 + 5 / 6 * c[m - 7] + 5580181 / 6692148 * c[
                m - 5] + 4887707739997 / 119037827289528 * c[m - 4] + 3 / 4 * c[
                 m - 6] + 660204843 / 13226425254392 * c[m - 3] + 660204843 / 13226425254392 * c[m - 2],
             -c[m - 7] / 6 - 1618585929605 / 9919818940794 * c[m - 4] - c[
                 m - 6] / 2 - 1118749 / 2230716 * c[m - 5] - 13091810925 / 13226425254392 * c[
                 m - 3] - 13091810925 / 13226425254392 * c[m - 2],
             -368395 / 2230716 * c[m - 5] + c[m - 6] / 8 + 48866620889 / 404890569012 * c[
                 m - 4] + 752806667 / 539854092016 * c[m - 3] + 752806667 / 539854092016 * c[m - 2],
             -3391 / 6692148 * c[m - 5] - 238797444493 / 119037827289528 * c[
                 m - 4] + 33235054191 / 26452850508784 * c[m - 3] + 33235054191 / 26452850508784 * c[
                 m - 2],
             -8673 / 2904112 * c[m - 3] - 8673 / 2904112 * c[m - 2] + 8673 / 1452056 * c[m - 4],
             -c[m - 4] / 392 + c[m - 3] / 784 + c[m - 2] / 784]
            , [
                -c[m - 7] / 6 - 1618585929605 / 9919818940794 * c[m - 4] - c[
                    m - 6] / 2 - 1118749 / 2230716 * c[m - 5] - 13091810925 / 13226425254392 * c[
                    m - 3] - 13091810925 / 13226425254392 * c[m - 2],
                c[m - 7] / 24 + 5 / 6 * c[m - 6] + 3896014498639 / 4959909470397 * c[
                    m - 4] + 8386761355510099813 / 128413970713633903242 * c[m - 3] + 280535 / 371786 * c[
                    m - 5] + 3360696339136261875 / 171218627618178537656 * c[m - 2],
                -c[m - 6] / 6 - 4959271814984644613 / 20965546238960637264 * c[
                    m - 3] - 375177 / 743572 * c[m - 5] - 13425842714 / 33740880751 * c[
                    m - 4] - 193247108773400725 / 6988515412986879088 * c[m - 2],
                -365281640980 / 1653303156799 * c[m - 4] + 564461 / 4461432 * c[
                    m - 5] + 1613976761032884305 / 7963657098519931984 * c[
                    m - 3] - 198407225513315475 / 7963657098519931984 * c[m - 2],
                -1328188692663 / 37594290333616 * c[m - 3] + 2226377963775 / 37594290333616 * c[
                    m - 2] - 8673 / 363014 * c[m - 4],
                c[m - 4] / 49 + 49579087 / 10149031312 * c[m - 3] - 256702175 / 10149031312 * c[
                    m - 2]]
            , [
                -368395 / 2230716 * c[m - 5] + c[m - 6] / 8 + 48866620889 / 404890569012 * c[
                    m - 4] + 752806667 / 539854092016 * c[m - 3] + 752806667 / 539854092016 * c[m - 2],
                -c[m - 6] / 6 - 4959271814984644613 / 20965546238960637264 * c[
                    m - 3] - 375177 / 743572 * c[m - 5] - 13425842714 / 33740880751 * c[
                    m - 4] - 193247108773400725 / 6988515412986879088 * c[m - 2],
                c[m - 6] / 24 + 1869103 / 2230716 * c[
                    m - 5] + 507284006600757858213 / 475219048083107777984 * c[m - 3] + 3 / 1088 * c[
                    m - 1] + 31688435395 / 67481761502 * c[
                    m - 4] + 27769176016102795561 / 712828572124661666976 * c[m - 2],
                -125059 / 743572 * c[m - 5] + c[m - 1] / 136 - 23099342648 / 101222642253 * c[
                    m - 4] - 4836340090442187227 / 5525802884687299744 * c[
                    m - 3] + 193950157930938693 / 5525802884687299744 * c[m - 2],
                260297319232891 / 2556411742685888 * c[m - 3] - 59 / 1088 * c[
                    m - 1] - 106641839640553 / 1278205871342944 * c[m - 2] + 26019 / 726028 * c[m - 4],
                -1244724001 / 21126554976 * c[m - 3] + 3 / 68 * c[
                    m - 1] + 752806667 / 21126554976 * c[m - 2]]
            , [
                -3391 / 6692148 * c[m - 5] - 238797444493 / 119037827289528 * c[
                    m - 4] + 33235054191 / 26452850508784 * c[m - 3] + 33235054191 / 26452850508784 * c[
                    m - 2],
                -365281640980 / 1653303156799 * c[m - 4] + 564461 / 4461432 * c[
                    m - 5] + 1613976761032884305 / 7963657098519931984 * c[
                    m - 3] - 198407225513315475 / 7963657098519931984 * c[m - 2],
                -125059 / 743572 * c[m - 5] + c[m - 1] / 136 - 23099342648 / 101222642253 * c[
                    m - 4] - 4836340090442187227 / 5525802884687299744 * c[
                    m - 3] + 193950157930938693 / 5525802884687299744 * c[m - 2],
                564461 / 13384296 * c[m - 5] + 470299699916357 / 952302618316224 * c[
                    m - 4] + 550597048646198778781 / 1624586048098066124736 * c[m - 2] + c[
                    m - 1] / 51 + 378288882302546512209 / 270764341349677687456 * c[m - 3],
                -59 / 408 * c[m - 1] - 29294615794607 / 29725717938208 * c[
                    m - 3] - 2234477713167 / 29725717938208 * c[m - 2] - 8673 / 363014 * c[m - 4],
                -59 / 3136 * c[m - 4] - 13249937023 / 48148892736 * c[m - 2] + 2 / 17 * c[
                    m - 1] + 2083938599 / 8024815456 * c[m - 3]]
            , [
                -8673 / 2904112 * c[m - 3] - 8673 / 2904112 * c[m - 2] + 8673 / 1452056 * c[m - 4],
                -1328188692663 / 37594290333616 * c[m - 3] + 2226377963775 / 37594290333616 * c[
                    m - 2] - 8673 / 363014 * c[m - 4],
                260297319232891 / 2556411742685888 * c[m - 3] - 59 / 1088 * c[
                    m - 1] - 106641839640553 / 1278205871342944 * c[m - 2] + 26019 / 726028 * c[m - 4],
                -59 / 408 * c[m - 1] - 29294615794607 / 29725717938208 * c[
                    m - 3] - 2234477713167 / 29725717938208 * c[m - 2] - 8673 / 363014 * c[m - 4],
                9258282831623875 / 7669235228057664 * c[m - 3] + 3481 / 3264 * c[
                    m - 1] + 228389721191751 / 1278205871342944 * c[m - 2] + 8673 / 1452056 * c[m - 4],
                -6025413881 / 21126554976 * c[m - 3] - 59 / 68 * c[
                    m - 1] - 537416663 / 7042184992 * c[m - 2]]
            , [
                -c[m - 4] / 392 + c[m - 3] / 784 + c[m - 2] / 784,
                c[m - 4] / 49 + 49579087 / 10149031312 * c[m - 3] - 256702175 / 10149031312 * c[
                    m - 2],
                -1244724001 / 21126554976 * c[m - 3] + 3 / 68 * c[
                    m - 1] + 752806667 / 21126554976 * c[m - 2],
                -59 / 3136 * c[m - 4] - 13249937023 / 48148892736 * c[m - 2] + 2 / 17 * c[
                    m - 1] + 2083938599 / 8024815456 * c[m - 3],
                -6025413881 / 21126554976 * c[m - 3] - 59 / 68 * c[
                    m - 1] - 537416663 / 7042184992 * c[m - 2],
                3 / 3136 * c[m - 4] + 27010400129 / 345067064608 * c[
                    m - 3] + 234566387291 / 690134129216 * c[m - 2] + 12 / 17 * c[m - 1]]])

        M = (M / h).tocsr()
        D2 = HI @ (-M - spsp.diags(c, shape=(m, m)) @ ((e_l @ d1_l.transpose()) - (e_r @ d1_r.transpose())))
        return D2

    return H, HI, D1, D2_fun, e_l, e_r, d1_l, d1_r
